name: CI

on:
  repository_dispatch:
    types: [run-tests]
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Compile and test on remote device
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            # Initialize a variable to indicate if any command failed
            failed=false
            ls
            cd ./testDir
            git clone git@github.com:EPFLRocketTeam/C_AV_SIL.git
            cd C_AV_SIL
            git checkout ${{ github.head_ref }}
            git submodule update --init --recursive --remote
            if [ -n "${{ github.event.client_payload.branch }}" ]; then
              git submodule set-branch --branch ${{ github.event.client_payload.branch }} ./2024_C_AV_RPI/
              cd ./2024_C_AV_RPI
              git checkout ${{ github.event.client_payload.branch }}
            else 
            git submodule init
            git submodule update --remote
            fi
            git submodule status
            

            cd 2024_C_AV_RPI
            git submodule update --init --recursive --remote
            cd ..
            #TODO: check where we are building from
            cat ./CMakeLists.txt
            mkdir build
            cd build
            cmake ..
            make
             if [ $? -ne 0 ]; then
              failed=true
            fi
            cd ../2024_C_AV_RPI
            cat ./CMakeLists.txt
          
        

      
            
  
  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Temp
        run: echo temp
      - name: CTest
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir/C_AV_SIL/build/2024_C_AV_RPI/tests
            ls
            ctest --output-on-failure -V
            


  coverage:
    needs: tests
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Analyse coverage
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir/C_AV_SIL/build
            find . -name "*.gcda" -exec gcov {} \;
            lcov --capture --directory . --output-file gcov.info
            pwd
            cd ../2024_C_AV_RPI
            source ~/.bashrc
            /opt/sonar-scanner/bin/sonar-scanner -Dsonar.token=${{secrets.TOKENMARIN}} -Dsonar.sources=src -Dsonar.tests=tests -Dsonar.cfamily.compile-commands=../build/compile_commands.json -Dsonar.host.url=https://sonarcloud.io -Dsonar.scm.provider=git -Dsonar.scm.exclusions.disabled=true -Dsonar.cpp.gcov.reportPaths=../build/gcov.info -Dsonar.projectKey=EPFLRocketTeam_C_AV_SIL -Dsonar.organization=epflrocketteam-1
          
  clean:
    needs: coverage
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Clean repo
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir
            rm -r C_AV_SIL

      
          
          

