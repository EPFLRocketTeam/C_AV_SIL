name: CI

on:
  repository_dispatch:
    types: [run-tests]
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Compile and test on remote device
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            # Initialize a variable to indicate if any command failed
            failed=false
            ls
            cd ./testDir
            git clone git@github.com:EPFLRocketTeam/C_AV_SIL.git
            cd C_AV_SIL
            git checkout ${{ github.head_ref }}
            git submodule update --init --recursive --remote
            if [ -n "${{ github.event.client_payload.branch }}" ]; then
              git submodule set-branch --branch ${{ github.event.client_payload.branch }} ./2024_C_AV_RPI/
              git checkout ${{ github.event.client_payload.branch }}
            else 
            git checkout ${{ github.head_ref }}
            fi
            
            git submodule set-branch --branch reorga ./2024_C_AV_RPI/
            git checkout reorga
            cd 2024_C_AV_RPI
            git submodule update --init --recursive --remote
            cd ..
            mkdir build
            cd build
            cmake ..
            make
             if [ $? -ne 0 ]; then
              failed=true
            fi
            cd ../..

            if [ "$failed" = true ]; then
              status="failure"
            else
              status="success"
            fi
            
  
  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Bmp test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir/C_AV_SIL/build/2024_C_AV_RPI
            ls
            sudo ./BMP390_test || exit 1
            


      - name: gps test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir/C_AV_SIL/build/2024_C_AV_RPI
            sudo ./BMP390_test || exit 1

      - name: LoRa test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir/C_AV_SIL/build/2024_C_AV_RPI
            sudo ./BMP390_test || exit 1
            
      

      - name: ADXL test
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir/C_AV_SIL/build/2024_C_AV_RPI
            sudo ./ADXL375_test || exit 1


  coverage:
    needs: tests
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Analyse coverage
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir/C_AV_SIL/build/2024_C_AV_RPI
            find . -name "*.gcda" -exec gcov {} \;
            
            
            

      
  trigger:
    needs: tests
    runs-on: ubuntu-latest
    #if: ${{ always() && github.event_name != 'pull_request' && github.event_name != 'push'}}
    steps:
      - name: Trigger source repository workflow
        if: always()
        id: trigger
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: EPFLRocketTeam/2024_C_AV_RPI
          event-type: completed
          client-payload: |
            {
              "status": "${{ job.status }}"
            }

  clean:
    needs: coverage
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Clean repo
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SECRET_IP }}
          username: ${{ secrets.SECRET_USER}}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SECRET_PORT }}
          script: |
            cd ./testDir
            rm -r C_AV_SIL
          
          

